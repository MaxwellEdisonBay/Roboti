#include "global.nxc";
#include "sensor.nxc";

#include "gui.nxc";


void init ()
{
  SetSensorTouch(S2);
  SetSensorLight(S1);
  SetSensorUltrasonic(S4);
}

bool stop_now() {
  SENSOR_sense();
  if(SENSOR_btnPressed)
  {
    Off(OUT_BC);
    Wait(4000);
    return true;
  }
  return false;
}


void calibrate()
{
  if(SENSOR_btnPressed && min == 0)
  {
    min = SENSOR_light();
    GUI_setMsg("Calibrate light.");
  }
  else if(SENSOR_btnPressed && min != 0 && max == 0)
  {
    max = SENSOR_light();
    desired = (min + max) / 2.0;
    desired = 0.37;
    GUI_setMsg("Calibrated!");

  }
  else if(SENSOR_btnPressed && desired != 0)
  {
    calibrated = 1;
    /* OnFwd(OUT_B, 100);

    // Left motor 0 ... 100 (Turn right)
    OnFwd(OUT_C, 100);
    Wait(500); */

  }
}

int MIN(int a, int b)
{
  if(a > b)
    return b;
  return a;
}

int MAX(int a, int b)
{
  if(a < b)
    return b;
  return a;
}

int LIMIT(int a, int b, int c)
{
  return MIN(MAX(a, b), c);
}

void senseDanger(){

  if(SENSOR_ultrasound < 26)
  {
      // left, right motor
      OnFwdSync(OUT_BC, 0, 0);

      Wait(50);

      OnFwd(OUT_C, 0);
      OnFwd(OUT_B, 40);

      Wait(500);

      OnFwdSync(OUT_BC, 50, 0);

      Wait(800);

      OnFwd(OUT_C, 40);
      OnFwd(OUT_B, 0);

      Wait(1000);

      float error = (SENSOR_lightValue - desired);
      OnFwdSync(OUT_BC, 30, 0);

      do{
        SENSOR_sense();
        error = (SENSOR_lightValue - desired);

        stop_now();
      }while(error > 0.08 || error < -0.08);

      evaded = 1;
      SENSOR_ultra();

  }

}

bool sumo()
{
  Wait(5000);

  OnFwdSync(OUT_BC, 40, 100);
  Wait(300);
  int i = 1;
  int a = 0;
  int d = 0;

  do {

  OnFwdSync(OUT_BC, 30, i*100);

  float change = 0;

  d = 0;
  do{
    float newSensorValue = SensorUS(S4);
    change = SENSOR_ultrasound - newSensorValue;
    SENSOR_ultrasound = newSensorValue;
    d += 1;
    if(d > 3000){
      d = 0;
      a += 1;
      break;
    } else {
      a = 0;
    }

    Wait(5);
  }while(SENSOR_ultrasound > 70 || change > -1.5);

  OnFwdSync(OUT_BC, 25, -i*100);
  Wait(100);

  //Wait(1250); // 180deg

  float error = (SENSOR_lightValue - desired);
  OnFwdSync(OUT_BC, 60, 0);
  Wait(200);

  do{
    SENSOR_sense();

    stop_now();
  }while(SENSOR_lightValue > 0.3);

  OnFwdSync(OUT_BC, -80, 0);
  Wait(400);


  OnFwdSync(OUT_BC, -40, 0);
  Wait(500);

  i = -1 * i;
  a += 1;

  }while(a <= 2);

  return true;

}

void followLine(){
  error = (SENSOR_lightValue - desired); // -1 ... 1

  proportional = error;
  int minPwd = 0;

  integral += error * passedTicks/1000;
  derivative = (error - previous_error) * passedTicks/1000;

  //const int add = 1;
  minPwd = 80; // 70

  const float Pc = 3.0; // 3.0 period

  const float Kc = 180; // 155

  float kp = 0.85 * Kc; // 0.85 * Kc

  float ki = 0.05 * kp / 1000 / Pc; // 2.0 * kp / 1000

  float kd = 13.8 * kp * Pc / (8 / 1000); // 10.0 * kp * Pc / (8 / 1000)

    /* float kp = 1403
    float ki = 0;//2.0 * kp / 1000 / Pc;
    float kd = 0; */


  const float limit = 0.01; // 0.01
  if(integral > limit)
    integral = limit;
  else if(integral < -limit)
    integral = -limit;

  motorLeft = minPwd - kp*proportional - ki*integral - kd*derivative;
  motorRight = minPwd + kp*proportional + ki*integral + kd*derivative;

  previous_error = error;
  // Right motor 0 ... 100 (Turn left)
  OnFwd(OUT_B, LIMIT(motorRight, -100, 100));

  // Left motor 0 ... 100 (Turn right)
  OnFwd(OUT_C, LIMIT(motorLeft, -100, 100));
  Wait(std_time);
}

void run ()
{
  unsigned int www = 0;

  GUI_setMsg("Calibrate dark.");
  calibrated = 1;
  desired = 0.37;
  evaded = 1;
  // ====================== TEST
  /*calibrated = 1;
  desired = 0.39;
  while(!SENSOR_btnPressed) {
    SENSOR_btn();
    Wait(1);
  }*/
  // ====================== TEST
  lastTick = CurrentTick();
  SENSOR_ultra();

  while (true) {

    SENSOR_sense();

    www += 1;
    if(www > 45 + evaded * 155) {
      SENSOR_ultra();
      www = 0;
    }

    if(calibrated) {
      /*
      Uloha 1. a 2.:
      followLine();
      senseDanger();
      */

      /*
      Uloha 3.:
      */
      if(sumo())
      {
        break;
      }

      if(stop_now())
      {
        break;
      }
    } else {
      calibrate();
    }

    if(SENSOR_btnPressed) {
      GUI_showPopup("Pressed!");
      Wait(600);
    }

    GUI_showGUI();

    SENSOR_btnPressed = 0;

    passedTicks = CurrentTick() - lastTick;
    lastTick = CurrentTick();
    /* dt = passedTicks / 1000.0; */
    /* if (passedTicks > std_time){
      float multiplierConst = 0.3;
      if (counter == 0){
        last_error = error;
        counter ++;
      }
      der_coeff = 1 + abs((last_error - error))/passedTicks*multiplierConst;

      lastTick = CurrentTick();
      last_error = error;
    } */
  }
}

task main () {
    init();
    TextOut(10, 10, "ATOM TEST");
    run();
}
