#include "global.nxc";
#include "sensor.nxc";

#include "gui.nxc";


void init ()
{
  SetSensorTouch(S2);
  SetSensorLight(S1);
}


void calibrate()
{
  if(SENSOR_btnPressed && min == 0)
  {
    min = SENSOR_light();
    GUI_setMsg("Calibrate light.");
  }
  else if(SENSOR_btnPressed && min != 0 && max == 0)
  {
    max = SENSOR_light();
    desired = (min + max) / 2.0;
    GUI_setMsg("Calibrated!");

  }
  else if(SENSOR_btnPressed && desired != 0)
  {
    calibrated = 1;
    /* OnFwd(OUT_B, 100);

    // Left motor 0 ... 100 (Turn right)
    OnFwd(OUT_C, 100);
    Wait(500); */

  }
}

int MIN(int a, int b)
{
  if(a > b)
    return b;
  return a;
}

int MAX(int a, int b)
{
  if(a < b)
    return b;
  return a;
}

int LIMIT(int a, int b, int c)
{
  return MIN(MAX(a, b), c);
}


void followLine_Copy_Paste(){
  error = (SENSOR_lightValue - desired);

  proportional = error;
  int minPwd = 0;

  integral += error * passedTicks/1000;
  derivative = (error - previous_error) * passedTicks/1000;

  minPwd = 54 + 2;

  float kp = 160 - 0;
  float ki = 5;
  float kd = 300 + 80;

  motorLeft = minPwd - kp*proportional - ki*integral - kd*derivative;
  motorRight = minPwd + kp*proportional + ki*integral + kd*derivative;

  previous_error = error;
  // Right motor 0 ... 100 (Turn left)
  OnFwd(OUT_B, LIMIT(motorRight, 0, 100));

  // Left motor 0 ... 100 (Turn right)
  OnFwd(OUT_C, LIMIT(motorLeft, 0, 100));
  Wait(std_time);
}


void followLine ()
{

  // -1.0 ... 1.0
  error = (SENSOR_lightValue - desired);

  // 1 Left / -1 Right side of line
  int direction = -1;

  int minPwd = 63;
  int konst = 100 + minPwd;

  motorLeft = minPwd - error * konst * direction*der_coeff;
  motorRight = minPwd + error * konst * direction*der_coeff;

  // Right motor 0 ... 100 (Turn left)
  OnFwd(OUT_B, LIMIT(motorRight, 0, 100));

  // Left motor 0 ... 100 (Turn right)
  OnFwd(OUT_C, LIMIT(motorLeft, 0, 100));

}


void run ()
{
  GUI_setMsg("Calibrate dark.");
  //calibrated = 1;
  // ====================== TEST
  /*calibrated = 1;
  desired = 0.38;
  while(true) {
    SENSOR_sense();
    if(SENSOR_btnPressed)
      break;
    Wait(15);
  }*/
  // ====================== TEST
  lastTick = CurrentTick();
  while (true) {

    SENSOR_sense();

    if(calibrated) {
      /* followLine(); */
      followLine_Copy_Paste();
      if(SENSOR_btnPressed)
      {
        Off(OUT_BC);
        Wait(4000);
        break;
      }
    } else {
      calibrate();
    }

    if(SENSOR_btnPressed) {
      GUI_showPopup("Pressed!");
      Wait(600);
    }

    GUI_showGUI();

    SENSOR_btnPressed = 0;

    passedTicks = CurrentTick() - lastTick;
    lastTick = CurrentTick();
    /* dt = passedTicks / 1000.0; */
    /* if (passedTicks > std_time){
      float multiplierConst = 0.3;
      if (counter == 0){
        last_error = error;
        counter ++;
      }
      der_coeff = 1 + abs((last_error - error))/passedTicks*multiplierConst;

      lastTick = CurrentTick();
      last_error = error;
    } */
  }
}

task main () {
    init();
    TextOut(10, 10, "ATOM TEST");
    run();
}
